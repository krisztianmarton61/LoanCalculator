@page "/loan-calculator"
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text
@using BlazorWasmApp.Services
@inject IJSRuntime JSRuntime
@inject LoanCalculationService LoanService

<div class="loan-calculator-container">
    <div class="loan-calculator-card">
        <h2>Loan Calculator</h2>
        <div class="form-group">
            <label for="loanAmount">Loan Amount (EUR)</label>
            <input type="number" id="loanAmount" class="form-control" @bind="loanAmount" @bind:event="oninput" />
        </div>
        <div class="form-group">
            <label for="interestRate">Interest Rate (%)</label>
            <input type="number" id="interestRate" class="form-control" @bind="interestRate" @bind:event="oninput" step="0.01" />
        </div>
        <div class="form-group">
            <label for="loanTerm">Loan Term (years)</label>
            <input type="number" id="loanTerm" class="form-control" @bind="loanTerm" @bind:event="oninput" />
        </div>
        <div class="form-group">
            <label for="additionalPayment">Additional Payment (EUR)</label>
            <input type="number" id="additionalPayment" class="form-control" @bind="additionalPayment" @bind:event="oninput" />
        </div>
        <button class="btn btn-primary" @onclick="CalculateLoan">Calculate</button>

        @if (monthlyPayment > 0)
        {
            <div class="results">
                <h3>Loan Summary</h3>
                <div class="result-item">
                    <span>Monthly Payment:</span>
                    <span>@monthlyPayment.ToString("N2") EUR</span>
                </div>
                <div class="result-item">
                    <span>Total Interest:</span>
                    <span>@totalInterest.ToString("N2") EUR</span>
                </div>
                <div class="result-item">
                    <span>Total Payment:</span>
                    <span>@totalPayment.ToString("N2") EUR</span>
                </div>
            </div>

            <div class="monthly-breakdown">
                <h3>Monthly Payment Breakdown</h3>
                <div class="button-group">
                    <a href="@downloadUrl" download="loan_breakdown.csv" class="btn btn-secondary">
                        <i class="bi bi-file-earmark-excel"></i> Export to Excel
                    </a>
                    <button class="btn btn-secondary" @onclick="ToggleGraph">Show/Hide Graph</button>
                </div>
                @if (showGraph)
                {
                    <div class="chart-container" style="height: 400px; min-height: 200px; max-height: 80vh;">
                        <canvas id="paymentChart"></canvas>
                    </div>
                }
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Month</th>
                                <th>Payment</th>
                                <th>Principal</th>
                                <th>Interest</th>
                                <th>Remaining Balance</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var payment in monthlyPayments)
                            {
                                <tr>
                                    <td>@payment.Month</td>
                                    <td>@payment.Payment.ToString("N2") EUR</td>
                                    <td>@payment.Principal.ToString("N2") EUR</td>
                                    <td>@payment.Interest.ToString("N2") EUR</td>
                                    <td>@payment.RemainingBalance.ToString("N2") EUR</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private decimal loanAmount = 100000;
    private decimal interestRate = 5.0m;
    private int loanTerm = 20;
    private decimal additionalPayment = 0;
    private decimal monthlyPayment;
    private decimal totalInterest;
    private decimal totalPayment;
    private List<LoanCalculationService.MonthlyPayment> monthlyPayments = new();
    private bool showGraph;
    private string downloadUrl = string.Empty;

    private async Task CalculateLoan()
    {
        var result = LoanService.CalculateLoan(loanAmount, interestRate, loanTerm, additionalPayment);
        
        monthlyPayment = result.MonthlyPayment;
        totalInterest = result.TotalInterest;
        totalPayment = result.TotalPayment;
        monthlyPayments = result.MonthlyPayments;

        GenerateDownloadUrl();

        if (showGraph)
        {
            await Task.Delay(100);
            await JSRuntime.InvokeVoidAsync("createPaymentChart",
                monthlyPayments.Select(p => (double)p.Payment).ToArray(),
                monthlyPayments.Select(p => (double)p.Interest).ToArray(),
                (double)loanAmount);
        }
    }

    private void GenerateDownloadUrl()
    {
        if (monthlyPayments == null || !monthlyPayments.Any())
        {
            downloadUrl = string.Empty;
            return;
        }

        var csv = new StringBuilder();
        
        csv.Append('\uFEFF');
        
        csv.AppendLine("Month;Payment;Principal;Interest;Remaining Balance");
        
        foreach (var payment in monthlyPayments)
        {
            csv.AppendLine($"{payment.Month};" +
                          $"{payment.Payment.ToString("F2", CultureInfo.InvariantCulture).Replace(".", ",")};" +
                          $"{payment.Principal.ToString("F2", CultureInfo.InvariantCulture).Replace(".", ",")};" +
                          $"{payment.Interest.ToString("F2", CultureInfo.InvariantCulture).Replace(".", ",")};" +
                          $"{payment.RemainingBalance.ToString("F2", CultureInfo.InvariantCulture).Replace(".", ",")}");
        }

        var bytes = Encoding.UTF8.GetBytes(csv.ToString());
        var base64 = Convert.ToBase64String(bytes);
        
        downloadUrl = $"data:text/csv;base64,{base64}";
    }

    private async Task ToggleGraph()
    {
        showGraph = !showGraph;
        if (showGraph)
        {
            await Task.Delay(100);
            await JSRuntime.InvokeVoidAsync("createPaymentChart",
                monthlyPayments.Select(p => (double)p.Payment).ToArray(),
                monthlyPayments.Select(p => (double)p.Interest).ToArray(),
                (double)loanAmount);
        }
    }
} 